/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99. DO NOT MODIFY.
*/
module I2CSlave_i2cSlave
    ( // Inputs
      input [1:0] \$d(%,%) 
    , input [16:0] eta2

      // Outputs
    , output wire [18:0] \#case_alt 
    );
  wire [0:0] a1;
  wire [0:0] b1;
  wire [0:0] c1;
  wire [0:0] d1;
  wire [6:0] e1;
  wire [7:0] f1;
  wire [18:0] ds;
  reg [0:0] \#ds_app_arg ;
  wire signed [63:0] \b' ;
  reg signed [63:0] result;
  reg [0:0] \#app_arg ;
  reg [0:0] result_0;
  reg signed [63:0] result_1;
  reg [0:0] \#app_arg_0 ;
  reg [0:0] \#app_arg_1 ;
  reg [0:0] result_2;
  reg signed [63:0] cnt1;
  reg [0:0] \#app_arg_2 ;
  reg [0:0] result_3;
  reg [7:0] shiftReg1;
  reg [0:0] \#app_arg_3 ;
  reg [0:0] \#app_arg_4 ;
  reg [0:0] result_4;
  reg [7:0] result_5;
  reg [0:0] \#app_arg_5 ;
  reg [0:0] result_6;
  reg [7:0] result_7;
  reg [7:0] result_8;
  reg [0:0] bit;
  wire [7:0] \#b'_app_arg ;
  reg [6:0] result_9;
  wire signed [63:0] \#b'_0 ;
  reg signed [63:0] result_10;
  reg [0:0] \#app_arg_6 ;
  reg [0:0] result_11;
  reg signed [63:0] result_12;
  reg [0:0] \#app_arg_7 ;
  reg [0:0] \#app_arg_8 ;
  reg [0:0] result_13;
  reg signed [63:0] cnt1_0;
  reg [0:0] \#app_arg_9 ;
  reg [0:0] result_14;
  wire [0:0] \a' ;
  reg [6:0] result_15;
  reg [0:0] \#app_arg_10 ;
  reg [0:0] \#app_arg_11 ;
  reg [0:0] result_16;
  reg [6:0] adr1;
  wire [0:0] \#a'_0 ;
  reg [0:0] result_17;
  reg [0:0] result_18;
  reg [0:0] \#app_arg_12 ;
  reg [0:0] \#app_arg_13 ;
  reg [0:0] result_19;
  reg [0:0] result_20;
  reg [0:0] \#ds_app_arg_0 ;
  reg [0:0] \#b'_1 ;
  reg [0:0] result_21;
  wire signed [63:0] \#b'_2 ;
  reg signed [63:0] result_22;
  reg [0:0] \#app_arg_14 ;
  reg [0:0] result_23;
  reg signed [63:0] result_24;
  reg [0:0] \#app_arg_15 ;
  reg [0:0] \#app_arg_16 ;
  reg [0:0] result_25;
  reg signed [63:0] cnt1_1;
  reg [0:0] \#app_arg_17 ;
  reg [0:0] result_26;
  reg [7:0] shiftReg1_0;
  reg [0:0] \#app_arg_18 ;
  reg [0:0] \#app_arg_19 ;
  reg [0:0] result_27;
  reg [7:0] result_28;
  reg [0:0] \#app_arg_20 ;
  reg [0:0] result_29;
  reg [7:0] result_30;
  reg [7:0] result_31;
  reg [0:0] bit_0;
  wire [7:0] \#b'_app_arg_0 ;
  reg [6:0] result_32;
  wire signed [63:0] \#b'_3 ;
  reg signed [63:0] result_33;
  reg [0:0] \#app_arg_21 ;
  reg [0:0] result_34;
  reg signed [63:0] result_35;
  reg [0:0] \#app_arg_22 ;
  reg [0:0] \#app_arg_23 ;
  reg [0:0] result_36;
  reg signed [63:0] cnt1_2;
  reg [0:0] \#app_arg_24 ;
  reg [0:0] result_37;
  wire [0:0] \#a'_1 ;
  reg [6:0] result_38;
  reg [0:0] \#app_arg_25 ;
  reg [0:0] \#app_arg_26 ;
  reg [0:0] result_39;
  reg [6:0] adr1_0;
  wire [0:0] \#a'_2 ;
  reg [0:0] result_40;
  reg [0:0] \#app_arg_27 ;
  reg [0:0] \#app_arg_28 ;
  reg [0:0] result_41;
  reg [0:0] wr1;
  reg [7:0] shiftReg1_1;
  reg [0:0] \#app_arg_29 ;
  reg [0:0] \#app_arg_30 ;
  reg [0:0] result_42;
  reg [7:0] result_43;
  reg [0:0] \#app_arg_31 ;
  reg [0:0] result_44;
  reg [7:0] result_45;
  reg [7:0] result_46;
  reg [0:0] bit_1;
  wire [7:0] \#b'_app_arg_1 ;
  reg [6:0] result_47;
  wire signed [63:0] \#b'_4 ;
  reg signed [63:0] result_48;
  reg [0:0] \#app_arg_32 ;
  reg [0:0] result_49;
  reg signed [63:0] result_50;
  reg [0:0] \#app_arg_33 ;
  reg [0:0] \#app_arg_34 ;
  reg [0:0] result_51;
  reg signed [63:0] cnt1_3;
  reg [0:0] \#app_arg_35 ;
  reg [0:0] result_52;
  wire [0:0] \#a'_3 ;
  reg [6:0] result_53;
  reg [0:0] \#app_arg_36 ;
  reg [0:0] \#app_arg_37 ;
  reg [0:0] result_54;
  reg [6:0] adr1_1;
  reg [7:0] dat;
  reg [0:0] result_55;
  reg [7:0] result_56;
  reg [0:0] ack;
  reg [0:0] tx_out;
  reg [0:0] \#app_arg_38 ;
  reg [0:0] \#app_arg_39 ;
  reg [0:0] result_57;
  reg [0:0] result_58;
  reg [0:0] result_59;
  reg [0:0] result_60;
  reg [7:0] result_61;
  wire [0:0] x;
  wire [0:0] x_0;
  wire [6:0] x_1;
  reg [7:0] shiftReg1_2;
  reg [0:0] \#app_arg_40 ;
  reg [0:0] \#app_arg_41 ;
  reg [0:0] result_62;
  reg [7:0] result_63;
  reg [0:0] \#app_arg_42 ;
  reg [0:0] result_64;
  reg [7:0] result_65;
  reg [7:0] result_66;
  reg [0:0] bit_2;
  wire [7:0] \#b'_app_arg_2 ;
  wire [0:0] \#a'_4 ;
  reg [0:0] result_67;
  reg [0:0] result_68;
  reg [0:0] \#app_arg_43 ;
  reg [0:0] result_69;
  wire [0:0] \#a'_5 ;
  wire [0:0] \#a'_6 ;
  wire signed [63:0] \#b'_5 ;
  reg signed [63:0] result_70;
  reg [0:0] \#app_arg_44 ;
  reg [0:0] result_71;
  reg signed [63:0] result_72;
  reg [0:0] \#app_arg_45 ;
  reg [0:0] \#app_arg_46 ;
  reg [0:0] result_73;
  reg signed [63:0] cnt1_4;
  reg [0:0] result_74;
  reg [0:0] result_75;
  wire [0:0] \#a'_7 ;
  wire [0:0] \#a'_8 ;
  reg [0:0] result_76;
  reg [0:0] result_77;
  wire signed [63:0] \#b'_6 ;
  reg signed [63:0] result_78;
  reg [0:0] \#app_arg_47 ;
  reg [0:0] result_79;
  reg signed [63:0] result_80;
  reg [0:0] \#app_arg_48 ;
  reg [0:0] \#app_arg_49 ;
  reg [0:0] result_81;
  reg signed [63:0] cnt1_5;
  reg [0:0] \#app_arg_50 ;
  reg [0:0] result_82;
  reg [7:0] shiftReg1_3;
  reg [0:0] \#app_arg_51 ;
  reg [0:0] \#app_arg_52 ;
  reg [0:0] result_83;
  reg [7:0] result_84;
  reg [0:0] \#app_arg_53 ;
  reg [0:0] result_85;
  reg [7:0] result_86;
  reg [7:0] result_87;
  reg [0:0] bit_3;
  wire [7:0] \#b'_app_arg_3 ;
  reg [6:0] result_88;
  wire signed [63:0] \#b'_7 ;
  reg signed [63:0] result_89;
  reg [0:0] \#app_arg_54 ;
  reg [0:0] result_90;
  reg signed [63:0] result_91;
  reg [0:0] \#app_arg_55 ;
  reg [0:0] \#app_arg_56 ;
  reg [0:0] result_92;
  reg signed [63:0] cnt1_6;
  reg [0:0] \#app_arg_57 ;
  reg [0:0] result_93;
  wire [0:0] \#a'_9 ;
  reg [6:0] result_94;
  reg [0:0] \#app_arg_58 ;
  reg [0:0] \#app_arg_59 ;
  reg [0:0] result_95;
  reg [6:0] adr1_2;
  wire [0:0] \#a'_10 ;
  reg [0:0] result_96;
  reg [0:0] result_97;
  reg [0:0] \#app_arg_60 ;
  reg [0:0] \#app_arg_61 ;
  reg [0:0] result_98;
  reg [0:0] result_99;
  reg [0:0] \#b'_8 ;
  reg [0:0] result_100;
  wire signed [63:0] \#b'_9 ;
  reg signed [63:0] result_101;
  reg [0:0] \#app_arg_62 ;
  reg [0:0] result_102;
  reg signed [63:0] result_103;
  reg [0:0] \#app_arg_63 ;
  reg [0:0] \#app_arg_64 ;
  reg [0:0] result_104;
  reg signed [63:0] cnt1_7;
  reg [0:0] \#app_arg_65 ;
  reg [0:0] result_105;
  reg [7:0] shiftReg1_4;
  reg [0:0] \#app_arg_66 ;
  reg [0:0] \#app_arg_67 ;
  reg [0:0] result_106;
  reg [7:0] result_107;
  reg [0:0] \#app_arg_68 ;
  reg [0:0] result_108;
  reg [7:0] result_109;
  reg [7:0] result_110;
  reg [0:0] bit_4;
  wire [7:0] \#b'_app_arg_4 ;
  reg [6:0] result_111;
  wire signed [63:0] \#b'_10 ;
  reg signed [63:0] result_112;
  reg [0:0] \#app_arg_69 ;
  reg [0:0] result_113;
  reg signed [63:0] result_114;
  reg [0:0] \#app_arg_70 ;
  reg [0:0] \#app_arg_71 ;
  reg [0:0] result_115;
  reg signed [63:0] cnt1_8;
  reg [0:0] \#app_arg_72 ;
  reg [0:0] result_116;
  wire [0:0] \#a'_11 ;
  reg [6:0] result_117;
  reg [0:0] \#app_arg_73 ;
  reg [0:0] \#app_arg_74 ;
  reg [0:0] result_118;
  reg [6:0] adr1_3;
  wire [0:0] \#a'_12 ;
  reg [0:0] result_119;
  reg [0:0] \#app_arg_75 ;
  reg [0:0] \#app_arg_76 ;
  reg [0:0] result_120;
  reg [0:0] wr1_0;
  wire [0:0] \#a'_13 ;
  reg [7:0] result_121;
  reg [7:0] result_122;
  reg [0:0] \#app_arg_77 ;
  reg [0:0] \#app_arg_78 ;
  reg [0:0] result_123;
  reg [7:0] \tx_data'1 ;
  wire [0:0] \#a'_14 ;
  reg [0:0] result_124;
  reg [0:0] result_125;
  wire [0:0] \#a'_15 ;
  wire [7:0] x_2;
  reg [0:0] result_126;
  wire [0:0] \#a'_16 ;
  reg [0:0] result_127;
  wire [0:0] \#a'_17 ;
  reg [0:0] result_128;
  wire [0:0] \#a'_app_arg ;
  wire [0:0] \#a'_18 ;
  reg [0:0] result_129;
  wire [0:0] \#a'_19 ;
  wire [0:0] \#a'_app_arg_0 ;

  assign \#case_alt  = {a1,b1,c1,d1,e1,f1};

  assign a1 = ds[18:18];

  assign b1 = ds[17:17];

  assign c1 = ds[16:16];

  assign d1 = ds[15:15];

  assign e1 = ds[14:8];

  assign f1 = ds[7:0];

  assign ds = {\#ds_app_arg 
              ,result_20
              ,\#ds_app_arg_0 
              ,wr1
              ,adr1_1
              ,dat};

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register
    if (\$d(%,%) [0:0]) begin
      \#ds_app_arg  <= 1'b1;
    end else begin
      \#ds_app_arg  <= (ack & tx_out);
    end
  end
  // register end

  assign \b'  = cnt1 + 64'sd1;

  always @(*) begin
    if(result_0)
      result = \b' ;
    else
      result = cnt1;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_0
    if (\$d(%,%) [0:0]) begin
      \#app_arg  <= 1'b1;
    end else begin
      \#app_arg  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_1
    if (\$d(%,%) [0:0]) begin
      result_0 <= 1'b0;
    end else begin
      result_0 <= (x & (~ \#app_arg ));
    end
  end
  // register end

  always @(*) begin
    if(result_2)
      result_1 = 64'sd0;
    else
      result_1 = result;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_2
    if (\$d(%,%) [0:0]) begin
      \#app_arg_0  <= 1'b1;
    end else begin
      \#app_arg_0  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_3
    if (\$d(%,%) [0:0]) begin
      \#app_arg_1  <= 1'b1;
    end else begin
      \#app_arg_1  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_4
    if (\$d(%,%) [0:0]) begin
      result_2 <= 1'b0;
    end else begin
      result_2 <= (x & (\#app_arg_0  & ((~ x_0) & \#app_arg_1 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_5
    if (\$d(%,%) [0:0]) begin
      cnt1 <= 64'sd0;
    end else begin
      cnt1 <= result_1;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_6
    if (\$d(%,%) [0:0]) begin
      \#app_arg_2  <= 1'b1;
    end else begin
      \#app_arg_2  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_7
    if (\$d(%,%) [0:0]) begin
      result_3 <= 1'b0;
    end else begin
      result_3 <= (x & (~ \#app_arg_2 ));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_8
    if (\$d(%,%) [0:0]) begin
      shiftReg1 <= 8'b00000000;
    end else begin
      shiftReg1 <= result_5;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_9
    if (\$d(%,%) [0:0]) begin
      \#app_arg_3  <= 1'b1;
    end else begin
      \#app_arg_3  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_10
    if (\$d(%,%) [0:0]) begin
      \#app_arg_4  <= 1'b1;
    end else begin
      \#app_arg_4  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_11
    if (\$d(%,%) [0:0]) begin
      result_4 <= 1'b0;
    end else begin
      result_4 <= (x & (\#app_arg_3  & ((~ x_0) & \#app_arg_4 )));
    end
  end
  // register end

  always @(*) begin
    if(result_4)
      result_5 = 8'b00000000;
    else
      result_5 = result_7;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_12
    if (\$d(%,%) [0:0]) begin
      \#app_arg_5  <= 1'b1;
    end else begin
      \#app_arg_5  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_13
    if (\$d(%,%) [0:0]) begin
      result_6 <= 1'b0;
    end else begin
      result_6 <= (x & (~ \#app_arg_5 ));
    end
  end
  // register end

  always @(*) begin
    if(result_6)
      result_7 = result_8;
    else
      result_7 = shiftReg1;
  end

  always @(*) begin
    if(bit)
      result_8 = \#b'_app_arg  | 8'b00000001;
    else
      result_8 = \#b'_app_arg  | 8'b00000000;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_14
    if (\$d(%,%) [0:0]) begin
      bit <= 1'b0;
    end else begin
      bit <= x_0;
    end
  end
  // register end

  assign \#b'_app_arg  = shiftReg1 << (64'sd1);

  always @(*) begin
    if(\a' )
      result_9 = shiftReg1[6 : 0];
    else
      result_9 = adr1;
  end

  assign \#b'_0  = cnt1_0 + 64'sd1;

  always @(*) begin
    if(result_11)
      result_10 = \#b'_0 ;
    else
      result_10 = cnt1_0;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_15
    if (\$d(%,%) [0:0]) begin
      \#app_arg_6  <= 1'b1;
    end else begin
      \#app_arg_6  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_16
    if (\$d(%,%) [0:0]) begin
      result_11 <= 1'b0;
    end else begin
      result_11 <= (x & (~ \#app_arg_6 ));
    end
  end
  // register end

  always @(*) begin
    if(result_13)
      result_12 = 64'sd0;
    else
      result_12 = result_10;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_17
    if (\$d(%,%) [0:0]) begin
      \#app_arg_7  <= 1'b1;
    end else begin
      \#app_arg_7  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_18
    if (\$d(%,%) [0:0]) begin
      \#app_arg_8  <= 1'b1;
    end else begin
      \#app_arg_8  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_19
    if (\$d(%,%) [0:0]) begin
      result_13 <= 1'b0;
    end else begin
      result_13 <= (x & (\#app_arg_7  & ((~ x_0) & \#app_arg_8 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_20
    if (\$d(%,%) [0:0]) begin
      cnt1_0 <= 64'sd0;
    end else begin
      cnt1_0 <= result_12;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_21
    if (\$d(%,%) [0:0]) begin
      \#app_arg_9  <= 1'b1;
    end else begin
      \#app_arg_9  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_22
    if (\$d(%,%) [0:0]) begin
      result_14 <= 1'b0;
    end else begin
      result_14 <= (x & (~ \#app_arg_9 ));
    end
  end
  // register end

  assign \a'  = (cnt1_0 == 64'sd7) & result_14;

  always @(*) begin
    if(result_16)
      result_15 = 7'b0000000;
    else
      result_15 = result_9;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_23
    if (\$d(%,%) [0:0]) begin
      \#app_arg_10  <= 1'b1;
    end else begin
      \#app_arg_10  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_24
    if (\$d(%,%) [0:0]) begin
      \#app_arg_11  <= 1'b1;
    end else begin
      \#app_arg_11  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_25
    if (\$d(%,%) [0:0]) begin
      result_16 <= 1'b0;
    end else begin
      result_16 <= (x & (\#app_arg_10  & ((~ x_0) & \#app_arg_11 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_26
    if (\$d(%,%) [0:0]) begin
      adr1 <= 7'b0000000;
    end else begin
      adr1 <= result_15;
    end
  end
  // register end

  assign \#a'_0  = (cnt1 == 64'sd8) & (result_3 & (x_1 == adr1));

  always @(*) begin
    if(\#a'_0 )
      result_17 = 1'b1;
    else
      result_17 = 1'b0;
  end

  always @(*) begin
    if(result_19)
      result_18 = 1'b0;
    else
      result_18 = result_17;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_27
    if (\$d(%,%) [0:0]) begin
      \#app_arg_12  <= 1'b1;
    end else begin
      \#app_arg_12  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_28
    if (\$d(%,%) [0:0]) begin
      \#app_arg_13  <= 1'b1;
    end else begin
      \#app_arg_13  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_29
    if (\$d(%,%) [0:0]) begin
      result_19 <= 1'b0;
    end else begin
      result_19 <= (x & (\#app_arg_12  & ((~ x_0) & \#app_arg_13 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_30
    if (\$d(%,%) [0:0]) begin
      result_20 <= 1'b0;
    end else begin
      result_20 <= result_18;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_31
    if (\$d(%,%) [0:0]) begin
      \#ds_app_arg_0  <= 1'b0;
    end else begin
      \#ds_app_arg_0  <= result_55;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_32
    if (\$d(%,%) [0:0]) begin
      \#b'_1  <= 1'b0;
    end else begin
      \#b'_1  <= x_0;
    end
  end
  // register end

  always @(*) begin
    if(\#a'_2 )
      result_21 = \#b'_1 ;
    else
      result_21 = wr1;
  end

  assign \#b'_2  = cnt1_1 + 64'sd1;

  always @(*) begin
    if(result_23)
      result_22 = \#b'_2 ;
    else
      result_22 = cnt1_1;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_33
    if (\$d(%,%) [0:0]) begin
      \#app_arg_14  <= 1'b1;
    end else begin
      \#app_arg_14  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_34
    if (\$d(%,%) [0:0]) begin
      result_23 <= 1'b0;
    end else begin
      result_23 <= (x & (~ \#app_arg_14 ));
    end
  end
  // register end

  always @(*) begin
    if(result_25)
      result_24 = 64'sd0;
    else
      result_24 = result_22;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_35
    if (\$d(%,%) [0:0]) begin
      \#app_arg_15  <= 1'b1;
    end else begin
      \#app_arg_15  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_36
    if (\$d(%,%) [0:0]) begin
      \#app_arg_16  <= 1'b1;
    end else begin
      \#app_arg_16  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_37
    if (\$d(%,%) [0:0]) begin
      result_25 <= 1'b0;
    end else begin
      result_25 <= (x & (\#app_arg_15  & ((~ x_0) & \#app_arg_16 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_38
    if (\$d(%,%) [0:0]) begin
      cnt1_1 <= 64'sd0;
    end else begin
      cnt1_1 <= result_24;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_39
    if (\$d(%,%) [0:0]) begin
      \#app_arg_17  <= 1'b1;
    end else begin
      \#app_arg_17  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_40
    if (\$d(%,%) [0:0]) begin
      result_26 <= 1'b0;
    end else begin
      result_26 <= (x & (~ \#app_arg_17 ));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_41
    if (\$d(%,%) [0:0]) begin
      shiftReg1_0 <= 8'b00000000;
    end else begin
      shiftReg1_0 <= result_28;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_42
    if (\$d(%,%) [0:0]) begin
      \#app_arg_18  <= 1'b1;
    end else begin
      \#app_arg_18  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_43
    if (\$d(%,%) [0:0]) begin
      \#app_arg_19  <= 1'b1;
    end else begin
      \#app_arg_19  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_44
    if (\$d(%,%) [0:0]) begin
      result_27 <= 1'b0;
    end else begin
      result_27 <= (x & (\#app_arg_18  & ((~ x_0) & \#app_arg_19 )));
    end
  end
  // register end

  always @(*) begin
    if(result_27)
      result_28 = 8'b00000000;
    else
      result_28 = result_30;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_45
    if (\$d(%,%) [0:0]) begin
      \#app_arg_20  <= 1'b1;
    end else begin
      \#app_arg_20  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_46
    if (\$d(%,%) [0:0]) begin
      result_29 <= 1'b0;
    end else begin
      result_29 <= (x & (~ \#app_arg_20 ));
    end
  end
  // register end

  always @(*) begin
    if(result_29)
      result_30 = result_31;
    else
      result_30 = shiftReg1_0;
  end

  always @(*) begin
    if(bit_0)
      result_31 = \#b'_app_arg_0  | 8'b00000001;
    else
      result_31 = \#b'_app_arg_0  | 8'b00000000;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_47
    if (\$d(%,%) [0:0]) begin
      bit_0 <= 1'b0;
    end else begin
      bit_0 <= x_0;
    end
  end
  // register end

  assign \#b'_app_arg_0  = shiftReg1_0 << (64'sd1);

  always @(*) begin
    if(\#a'_1 )
      result_32 = shiftReg1_0[6 : 0];
    else
      result_32 = adr1_0;
  end

  assign \#b'_3  = cnt1_2 + 64'sd1;

  always @(*) begin
    if(result_34)
      result_33 = \#b'_3 ;
    else
      result_33 = cnt1_2;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_48
    if (\$d(%,%) [0:0]) begin
      \#app_arg_21  <= 1'b1;
    end else begin
      \#app_arg_21  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_49
    if (\$d(%,%) [0:0]) begin
      result_34 <= 1'b0;
    end else begin
      result_34 <= (x & (~ \#app_arg_21 ));
    end
  end
  // register end

  always @(*) begin
    if(result_36)
      result_35 = 64'sd0;
    else
      result_35 = result_33;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_50
    if (\$d(%,%) [0:0]) begin
      \#app_arg_22  <= 1'b1;
    end else begin
      \#app_arg_22  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_51
    if (\$d(%,%) [0:0]) begin
      \#app_arg_23  <= 1'b1;
    end else begin
      \#app_arg_23  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_52
    if (\$d(%,%) [0:0]) begin
      result_36 <= 1'b0;
    end else begin
      result_36 <= (x & (\#app_arg_22  & ((~ x_0) & \#app_arg_23 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_53
    if (\$d(%,%) [0:0]) begin
      cnt1_2 <= 64'sd0;
    end else begin
      cnt1_2 <= result_35;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_54
    if (\$d(%,%) [0:0]) begin
      \#app_arg_24  <= 1'b1;
    end else begin
      \#app_arg_24  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_55
    if (\$d(%,%) [0:0]) begin
      result_37 <= 1'b0;
    end else begin
      result_37 <= (x & (~ \#app_arg_24 ));
    end
  end
  // register end

  assign \#a'_1  = (cnt1_2 == 64'sd7) & result_37;

  always @(*) begin
    if(result_39)
      result_38 = 7'b0000000;
    else
      result_38 = result_32;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_56
    if (\$d(%,%) [0:0]) begin
      \#app_arg_25  <= 1'b1;
    end else begin
      \#app_arg_25  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_57
    if (\$d(%,%) [0:0]) begin
      \#app_arg_26  <= 1'b1;
    end else begin
      \#app_arg_26  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_58
    if (\$d(%,%) [0:0]) begin
      result_39 <= 1'b0;
    end else begin
      result_39 <= (x & (\#app_arg_25  & ((~ x_0) & \#app_arg_26 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_59
    if (\$d(%,%) [0:0]) begin
      adr1_0 <= 7'b0000000;
    end else begin
      adr1_0 <= result_38;
    end
  end
  // register end

  assign \#a'_2  = (cnt1_1 == 64'sd8) & (result_26 & (x_1 == adr1_0));

  always @(*) begin
    if(result_41)
      result_40 = 1'b0;
    else
      result_40 = result_21;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_60
    if (\$d(%,%) [0:0]) begin
      \#app_arg_27  <= 1'b1;
    end else begin
      \#app_arg_27  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_61
    if (\$d(%,%) [0:0]) begin
      \#app_arg_28  <= 1'b1;
    end else begin
      \#app_arg_28  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_62
    if (\$d(%,%) [0:0]) begin
      result_41 <= 1'b0;
    end else begin
      result_41 <= (x & (\#app_arg_27  & ((~ x_0) & \#app_arg_28 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_63
    if (\$d(%,%) [0:0]) begin
      wr1 <= 1'b0;
    end else begin
      wr1 <= result_40;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_64
    if (\$d(%,%) [0:0]) begin
      shiftReg1_1 <= 8'b00000000;
    end else begin
      shiftReg1_1 <= result_43;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_65
    if (\$d(%,%) [0:0]) begin
      \#app_arg_29  <= 1'b1;
    end else begin
      \#app_arg_29  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_66
    if (\$d(%,%) [0:0]) begin
      \#app_arg_30  <= 1'b1;
    end else begin
      \#app_arg_30  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_67
    if (\$d(%,%) [0:0]) begin
      result_42 <= 1'b0;
    end else begin
      result_42 <= (x & (\#app_arg_29  & ((~ x_0) & \#app_arg_30 )));
    end
  end
  // register end

  always @(*) begin
    if(result_42)
      result_43 = 8'b00000000;
    else
      result_43 = result_45;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_68
    if (\$d(%,%) [0:0]) begin
      \#app_arg_31  <= 1'b1;
    end else begin
      \#app_arg_31  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_69
    if (\$d(%,%) [0:0]) begin
      result_44 <= 1'b0;
    end else begin
      result_44 <= (x & (~ \#app_arg_31 ));
    end
  end
  // register end

  always @(*) begin
    if(result_44)
      result_45 = result_46;
    else
      result_45 = shiftReg1_1;
  end

  always @(*) begin
    if(bit_1)
      result_46 = \#b'_app_arg_1  | 8'b00000001;
    else
      result_46 = \#b'_app_arg_1  | 8'b00000000;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_70
    if (\$d(%,%) [0:0]) begin
      bit_1 <= 1'b0;
    end else begin
      bit_1 <= x_0;
    end
  end
  // register end

  assign \#b'_app_arg_1  = shiftReg1_1 << (64'sd1);

  always @(*) begin
    if(\#a'_3 )
      result_47 = shiftReg1_1[6 : 0];
    else
      result_47 = adr1_1;
  end

  assign \#b'_4  = cnt1_3 + 64'sd1;

  always @(*) begin
    if(result_49)
      result_48 = \#b'_4 ;
    else
      result_48 = cnt1_3;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_71
    if (\$d(%,%) [0:0]) begin
      \#app_arg_32  <= 1'b1;
    end else begin
      \#app_arg_32  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_72
    if (\$d(%,%) [0:0]) begin
      result_49 <= 1'b0;
    end else begin
      result_49 <= (x & (~ \#app_arg_32 ));
    end
  end
  // register end

  always @(*) begin
    if(result_51)
      result_50 = 64'sd0;
    else
      result_50 = result_48;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_73
    if (\$d(%,%) [0:0]) begin
      \#app_arg_33  <= 1'b1;
    end else begin
      \#app_arg_33  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_74
    if (\$d(%,%) [0:0]) begin
      \#app_arg_34  <= 1'b1;
    end else begin
      \#app_arg_34  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_75
    if (\$d(%,%) [0:0]) begin
      result_51 <= 1'b0;
    end else begin
      result_51 <= (x & (\#app_arg_33  & ((~ x_0) & \#app_arg_34 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_76
    if (\$d(%,%) [0:0]) begin
      cnt1_3 <= 64'sd0;
    end else begin
      cnt1_3 <= result_50;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_77
    if (\$d(%,%) [0:0]) begin
      \#app_arg_35  <= 1'b1;
    end else begin
      \#app_arg_35  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_78
    if (\$d(%,%) [0:0]) begin
      result_52 <= 1'b0;
    end else begin
      result_52 <= (x & (~ \#app_arg_35 ));
    end
  end
  // register end

  assign \#a'_3  = (cnt1_3 == 64'sd7) & result_52;

  always @(*) begin
    if(result_54)
      result_53 = 7'b0000000;
    else
      result_53 = result_47;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_79
    if (\$d(%,%) [0:0]) begin
      \#app_arg_36  <= 1'b1;
    end else begin
      \#app_arg_36  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_80
    if (\$d(%,%) [0:0]) begin
      \#app_arg_37  <= 1'b1;
    end else begin
      \#app_arg_37  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_81
    if (\$d(%,%) [0:0]) begin
      result_54 <= 1'b0;
    end else begin
      result_54 <= (x & (\#app_arg_36  & ((~ x_0) & \#app_arg_37 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_82
    if (\$d(%,%) [0:0]) begin
      adr1_1 <= 7'b0000000;
    end else begin
      adr1_1 <= result_53;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_83
    if (\$d(%,%) [0:0]) begin
      dat <= 8'b00000000;
    end else begin
      dat <= result_56;
    end
  end
  // register end

  always @(*) begin
    if(result_57)
      result_55 = 1'b0;
    else
      result_55 = result_60;
  end

  always @(*) begin
    if(result_57)
      result_56 = 8'b00000000;
    else
      result_56 = result_61;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_84
    if (\$d(%,%) [0:0]) begin
      ack <= 1'b0;
    end else begin
      ack <= result_58;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_85
    if (\$d(%,%) [0:0]) begin
      tx_out <= 1'b1;
    end else begin
      tx_out <= result_59;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_86
    if (\$d(%,%) [0:0]) begin
      \#app_arg_38  <= 1'b1;
    end else begin
      \#app_arg_38  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_87
    if (\$d(%,%) [0:0]) begin
      \#app_arg_39  <= 1'b1;
    end else begin
      \#app_arg_39  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_88
    if (\$d(%,%) [0:0]) begin
      result_57 <= 1'b0;
    end else begin
      result_57 <= (x & (\#app_arg_38  & ((~ x_0) & \#app_arg_39 )));
    end
  end
  // register end

  always @(*) begin
    if(result_57)
      result_58 = 1'b0;
    else
      result_58 = result_67;
  end

  always @(*) begin
    if(result_57)
      result_59 = 1'b1;
    else
      result_59 = result_68;
  end

  always @(*) begin
    if(\#a'_18 )
      result_60 = 1'b1;
    else
      result_60 = 1'b0;
  end

  always @(*) begin
    if(\#a'_4 )
      result_61 = shiftReg1_2;
    else
      result_61 = dat;
  end

  assign x = eta2[16:16];

  assign x_0 = eta2[15:15];

  assign x_1 = eta2[14:8];

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_89
    if (\$d(%,%) [0:0]) begin
      shiftReg1_2 <= 8'b00000000;
    end else begin
      shiftReg1_2 <= result_63;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_90
    if (\$d(%,%) [0:0]) begin
      \#app_arg_40  <= 1'b1;
    end else begin
      \#app_arg_40  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_91
    if (\$d(%,%) [0:0]) begin
      \#app_arg_41  <= 1'b1;
    end else begin
      \#app_arg_41  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_92
    if (\$d(%,%) [0:0]) begin
      result_62 <= 1'b0;
    end else begin
      result_62 <= (x & (\#app_arg_40  & ((~ x_0) & \#app_arg_41 )));
    end
  end
  // register end

  always @(*) begin
    if(result_62)
      result_63 = 8'b00000000;
    else
      result_63 = result_65;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_93
    if (\$d(%,%) [0:0]) begin
      \#app_arg_42  <= 1'b1;
    end else begin
      \#app_arg_42  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_94
    if (\$d(%,%) [0:0]) begin
      result_64 <= 1'b0;
    end else begin
      result_64 <= (x & (~ \#app_arg_42 ));
    end
  end
  // register end

  always @(*) begin
    if(result_64)
      result_65 = result_66;
    else
      result_65 = shiftReg1_2;
  end

  always @(*) begin
    if(bit_2)
      result_66 = \#b'_app_arg_2  | 8'b00000001;
    else
      result_66 = \#b'_app_arg_2  | 8'b00000000;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_95
    if (\$d(%,%) [0:0]) begin
      bit_2 <= 1'b0;
    end else begin
      bit_2 <= x_0;
    end
  end
  // register end

  assign \#b'_app_arg_2  = shiftReg1_2 << (64'sd1);

  assign \#a'_4  = \#a'_app_arg  & result_69;

  always @(*) begin
    if(\#a'_5 )
      result_67 = 1'b1;
    else
      result_67 = result_74;
  end

  always @(*) begin
    if(\#a'_6 )
      result_68 = (\tx_data'1 [(64'sd7)]) == 1'b1;
    else
      result_68 = result_75;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_96
    if (\$d(%,%) [0:0]) begin
      \#app_arg_43  <= 1'b1;
    end else begin
      \#app_arg_43  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_97
    if (\$d(%,%) [0:0]) begin
      result_69 <= 1'b0;
    end else begin
      result_69 <= (x & (~ \#app_arg_43 ));
    end
  end
  // register end

  assign \#a'_5  = (cnt1_4 == 64'sd8) & \#a'_app_arg_0 ;

  assign \#a'_6  = (cnt1_4 == 64'sd10) & \#a'_app_arg_0 ;

  assign \#b'_5  = cnt1_4 + 64'sd1;

  always @(*) begin
    if(result_71)
      result_70 = \#b'_5 ;
    else
      result_70 = cnt1_4;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_98
    if (\$d(%,%) [0:0]) begin
      \#app_arg_44  <= 1'b1;
    end else begin
      \#app_arg_44  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_99
    if (\$d(%,%) [0:0]) begin
      result_71 <= 1'b0;
    end else begin
      result_71 <= (x & (~ \#app_arg_44 ));
    end
  end
  // register end

  always @(*) begin
    if(result_73)
      result_72 = 64'sd0;
    else
      result_72 = result_70;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_100
    if (\$d(%,%) [0:0]) begin
      \#app_arg_45  <= 1'b1;
    end else begin
      \#app_arg_45  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_101
    if (\$d(%,%) [0:0]) begin
      \#app_arg_46  <= 1'b1;
    end else begin
      \#app_arg_46  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_102
    if (\$d(%,%) [0:0]) begin
      result_73 <= 1'b0;
    end else begin
      result_73 <= (x & (\#app_arg_45  & ((~ x_0) & \#app_arg_46 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_103
    if (\$d(%,%) [0:0]) begin
      cnt1_4 <= 64'sd0;
    end else begin
      cnt1_4 <= result_72;
    end
  end
  // register end

  always @(*) begin
    if(\#a'_7 )
      result_74 = 1'b0;
    else
      result_74 = result_76;
  end

  always @(*) begin
    if(\#a'_8 )
      result_75 = (\tx_data'1 [(64'sd6)]) == 1'b1;
    else
      result_75 = result_77;
  end

  assign \#a'_7  = (cnt1_4 == 64'sd9) & \#a'_app_arg_0 ;

  assign \#a'_8  = (cnt1_4 == 64'sd11) & \#a'_app_arg_0 ;

  always @(*) begin
    if(\#a'_18 )
      result_76 = 1'b1;
    else
      result_76 = result_124;
  end

  always @(*) begin
    if(\#a'_14 )
      result_77 = (\tx_data'1 [(64'sd5)]) == 1'b1;
    else
      result_77 = result_125;
  end

  assign \#b'_6  = cnt1_5 + 64'sd1;

  always @(*) begin
    if(result_79)
      result_78 = \#b'_6 ;
    else
      result_78 = cnt1_5;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_104
    if (\$d(%,%) [0:0]) begin
      \#app_arg_47  <= 1'b1;
    end else begin
      \#app_arg_47  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_105
    if (\$d(%,%) [0:0]) begin
      result_79 <= 1'b0;
    end else begin
      result_79 <= (x & (~ \#app_arg_47 ));
    end
  end
  // register end

  always @(*) begin
    if(result_81)
      result_80 = 64'sd0;
    else
      result_80 = result_78;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_106
    if (\$d(%,%) [0:0]) begin
      \#app_arg_48  <= 1'b1;
    end else begin
      \#app_arg_48  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_107
    if (\$d(%,%) [0:0]) begin
      \#app_arg_49  <= 1'b1;
    end else begin
      \#app_arg_49  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_108
    if (\$d(%,%) [0:0]) begin
      result_81 <= 1'b0;
    end else begin
      result_81 <= (x & (\#app_arg_48  & ((~ x_0) & \#app_arg_49 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_109
    if (\$d(%,%) [0:0]) begin
      cnt1_5 <= 64'sd0;
    end else begin
      cnt1_5 <= result_80;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_110
    if (\$d(%,%) [0:0]) begin
      \#app_arg_50  <= 1'b1;
    end else begin
      \#app_arg_50  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_111
    if (\$d(%,%) [0:0]) begin
      result_82 <= 1'b0;
    end else begin
      result_82 <= (x & (~ \#app_arg_50 ));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_112
    if (\$d(%,%) [0:0]) begin
      shiftReg1_3 <= 8'b00000000;
    end else begin
      shiftReg1_3 <= result_84;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_113
    if (\$d(%,%) [0:0]) begin
      \#app_arg_51  <= 1'b1;
    end else begin
      \#app_arg_51  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_114
    if (\$d(%,%) [0:0]) begin
      \#app_arg_52  <= 1'b1;
    end else begin
      \#app_arg_52  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_115
    if (\$d(%,%) [0:0]) begin
      result_83 <= 1'b0;
    end else begin
      result_83 <= (x & (\#app_arg_51  & ((~ x_0) & \#app_arg_52 )));
    end
  end
  // register end

  always @(*) begin
    if(result_83)
      result_84 = 8'b00000000;
    else
      result_84 = result_86;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_116
    if (\$d(%,%) [0:0]) begin
      \#app_arg_53  <= 1'b1;
    end else begin
      \#app_arg_53  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_117
    if (\$d(%,%) [0:0]) begin
      result_85 <= 1'b0;
    end else begin
      result_85 <= (x & (~ \#app_arg_53 ));
    end
  end
  // register end

  always @(*) begin
    if(result_85)
      result_86 = result_87;
    else
      result_86 = shiftReg1_3;
  end

  always @(*) begin
    if(bit_3)
      result_87 = \#b'_app_arg_3  | 8'b00000001;
    else
      result_87 = \#b'_app_arg_3  | 8'b00000000;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_118
    if (\$d(%,%) [0:0]) begin
      bit_3 <= 1'b0;
    end else begin
      bit_3 <= x_0;
    end
  end
  // register end

  assign \#b'_app_arg_3  = shiftReg1_3 << (64'sd1);

  always @(*) begin
    if(\#a'_9 )
      result_88 = shiftReg1_3[6 : 0];
    else
      result_88 = adr1_2;
  end

  assign \#b'_7  = cnt1_6 + 64'sd1;

  always @(*) begin
    if(result_90)
      result_89 = \#b'_7 ;
    else
      result_89 = cnt1_6;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_119
    if (\$d(%,%) [0:0]) begin
      \#app_arg_54  <= 1'b1;
    end else begin
      \#app_arg_54  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_120
    if (\$d(%,%) [0:0]) begin
      result_90 <= 1'b0;
    end else begin
      result_90 <= (x & (~ \#app_arg_54 ));
    end
  end
  // register end

  always @(*) begin
    if(result_92)
      result_91 = 64'sd0;
    else
      result_91 = result_89;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_121
    if (\$d(%,%) [0:0]) begin
      \#app_arg_55  <= 1'b1;
    end else begin
      \#app_arg_55  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_122
    if (\$d(%,%) [0:0]) begin
      \#app_arg_56  <= 1'b1;
    end else begin
      \#app_arg_56  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_123
    if (\$d(%,%) [0:0]) begin
      result_92 <= 1'b0;
    end else begin
      result_92 <= (x & (\#app_arg_55  & ((~ x_0) & \#app_arg_56 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_124
    if (\$d(%,%) [0:0]) begin
      cnt1_6 <= 64'sd0;
    end else begin
      cnt1_6 <= result_91;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_125
    if (\$d(%,%) [0:0]) begin
      \#app_arg_57  <= 1'b1;
    end else begin
      \#app_arg_57  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_126
    if (\$d(%,%) [0:0]) begin
      result_93 <= 1'b0;
    end else begin
      result_93 <= (x & (~ \#app_arg_57 ));
    end
  end
  // register end

  assign \#a'_9  = (cnt1_6 == 64'sd7) & result_93;

  always @(*) begin
    if(result_95)
      result_94 = 7'b0000000;
    else
      result_94 = result_88;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_127
    if (\$d(%,%) [0:0]) begin
      \#app_arg_58  <= 1'b1;
    end else begin
      \#app_arg_58  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_128
    if (\$d(%,%) [0:0]) begin
      \#app_arg_59  <= 1'b1;
    end else begin
      \#app_arg_59  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_129
    if (\$d(%,%) [0:0]) begin
      result_95 <= 1'b0;
    end else begin
      result_95 <= (x & (\#app_arg_58  & ((~ x_0) & \#app_arg_59 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_130
    if (\$d(%,%) [0:0]) begin
      adr1_2 <= 7'b0000000;
    end else begin
      adr1_2 <= result_94;
    end
  end
  // register end

  assign \#a'_10  = (cnt1_5 == 64'sd8) & (result_82 & (x_1 == adr1_2));

  always @(*) begin
    if(\#a'_10 )
      result_96 = 1'b1;
    else
      result_96 = 1'b0;
  end

  always @(*) begin
    if(result_98)
      result_97 = 1'b0;
    else
      result_97 = result_96;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_131
    if (\$d(%,%) [0:0]) begin
      \#app_arg_60  <= 1'b1;
    end else begin
      \#app_arg_60  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_132
    if (\$d(%,%) [0:0]) begin
      \#app_arg_61  <= 1'b1;
    end else begin
      \#app_arg_61  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_133
    if (\$d(%,%) [0:0]) begin
      result_98 <= 1'b0;
    end else begin
      result_98 <= (x & (\#app_arg_60  & ((~ x_0) & \#app_arg_61 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_134
    if (\$d(%,%) [0:0]) begin
      result_99 <= 1'b0;
    end else begin
      result_99 <= result_97;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_135
    if (\$d(%,%) [0:0]) begin
      \#b'_8  <= 1'b0;
    end else begin
      \#b'_8  <= x_0;
    end
  end
  // register end

  always @(*) begin
    if(\#a'_12 )
      result_100 = \#b'_8 ;
    else
      result_100 = wr1_0;
  end

  assign \#b'_9  = cnt1_7 + 64'sd1;

  always @(*) begin
    if(result_102)
      result_101 = \#b'_9 ;
    else
      result_101 = cnt1_7;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_136
    if (\$d(%,%) [0:0]) begin
      \#app_arg_62  <= 1'b1;
    end else begin
      \#app_arg_62  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_137
    if (\$d(%,%) [0:0]) begin
      result_102 <= 1'b0;
    end else begin
      result_102 <= (x & (~ \#app_arg_62 ));
    end
  end
  // register end

  always @(*) begin
    if(result_104)
      result_103 = 64'sd0;
    else
      result_103 = result_101;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_138
    if (\$d(%,%) [0:0]) begin
      \#app_arg_63  <= 1'b1;
    end else begin
      \#app_arg_63  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_139
    if (\$d(%,%) [0:0]) begin
      \#app_arg_64  <= 1'b1;
    end else begin
      \#app_arg_64  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_140
    if (\$d(%,%) [0:0]) begin
      result_104 <= 1'b0;
    end else begin
      result_104 <= (x & (\#app_arg_63  & ((~ x_0) & \#app_arg_64 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_141
    if (\$d(%,%) [0:0]) begin
      cnt1_7 <= 64'sd0;
    end else begin
      cnt1_7 <= result_103;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_142
    if (\$d(%,%) [0:0]) begin
      \#app_arg_65  <= 1'b1;
    end else begin
      \#app_arg_65  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_143
    if (\$d(%,%) [0:0]) begin
      result_105 <= 1'b0;
    end else begin
      result_105 <= (x & (~ \#app_arg_65 ));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_144
    if (\$d(%,%) [0:0]) begin
      shiftReg1_4 <= 8'b00000000;
    end else begin
      shiftReg1_4 <= result_107;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_145
    if (\$d(%,%) [0:0]) begin
      \#app_arg_66  <= 1'b1;
    end else begin
      \#app_arg_66  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_146
    if (\$d(%,%) [0:0]) begin
      \#app_arg_67  <= 1'b1;
    end else begin
      \#app_arg_67  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_147
    if (\$d(%,%) [0:0]) begin
      result_106 <= 1'b0;
    end else begin
      result_106 <= (x & (\#app_arg_66  & ((~ x_0) & \#app_arg_67 )));
    end
  end
  // register end

  always @(*) begin
    if(result_106)
      result_107 = 8'b00000000;
    else
      result_107 = result_109;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_148
    if (\$d(%,%) [0:0]) begin
      \#app_arg_68  <= 1'b1;
    end else begin
      \#app_arg_68  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_149
    if (\$d(%,%) [0:0]) begin
      result_108 <= 1'b0;
    end else begin
      result_108 <= (x & (~ \#app_arg_68 ));
    end
  end
  // register end

  always @(*) begin
    if(result_108)
      result_109 = result_110;
    else
      result_109 = shiftReg1_4;
  end

  always @(*) begin
    if(bit_4)
      result_110 = \#b'_app_arg_4  | 8'b00000001;
    else
      result_110 = \#b'_app_arg_4  | 8'b00000000;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_150
    if (\$d(%,%) [0:0]) begin
      bit_4 <= 1'b0;
    end else begin
      bit_4 <= x_0;
    end
  end
  // register end

  assign \#b'_app_arg_4  = shiftReg1_4 << (64'sd1);

  always @(*) begin
    if(\#a'_11 )
      result_111 = shiftReg1_4[6 : 0];
    else
      result_111 = adr1_3;
  end

  assign \#b'_10  = cnt1_8 + 64'sd1;

  always @(*) begin
    if(result_113)
      result_112 = \#b'_10 ;
    else
      result_112 = cnt1_8;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_151
    if (\$d(%,%) [0:0]) begin
      \#app_arg_69  <= 1'b1;
    end else begin
      \#app_arg_69  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_152
    if (\$d(%,%) [0:0]) begin
      result_113 <= 1'b0;
    end else begin
      result_113 <= (x & (~ \#app_arg_69 ));
    end
  end
  // register end

  always @(*) begin
    if(result_115)
      result_114 = 64'sd0;
    else
      result_114 = result_112;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_153
    if (\$d(%,%) [0:0]) begin
      \#app_arg_70  <= 1'b1;
    end else begin
      \#app_arg_70  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_154
    if (\$d(%,%) [0:0]) begin
      \#app_arg_71  <= 1'b1;
    end else begin
      \#app_arg_71  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_155
    if (\$d(%,%) [0:0]) begin
      result_115 <= 1'b0;
    end else begin
      result_115 <= (x & (\#app_arg_70  & ((~ x_0) & \#app_arg_71 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_156
    if (\$d(%,%) [0:0]) begin
      cnt1_8 <= 64'sd0;
    end else begin
      cnt1_8 <= result_114;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_157
    if (\$d(%,%) [0:0]) begin
      \#app_arg_72  <= 1'b1;
    end else begin
      \#app_arg_72  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_158
    if (\$d(%,%) [0:0]) begin
      result_116 <= 1'b0;
    end else begin
      result_116 <= (x & (~ \#app_arg_72 ));
    end
  end
  // register end

  assign \#a'_11  = (cnt1_8 == 64'sd7) & result_116;

  always @(*) begin
    if(result_118)
      result_117 = 7'b0000000;
    else
      result_117 = result_111;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_159
    if (\$d(%,%) [0:0]) begin
      \#app_arg_73  <= 1'b1;
    end else begin
      \#app_arg_73  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_160
    if (\$d(%,%) [0:0]) begin
      \#app_arg_74  <= 1'b1;
    end else begin
      \#app_arg_74  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_161
    if (\$d(%,%) [0:0]) begin
      result_118 <= 1'b0;
    end else begin
      result_118 <= (x & (\#app_arg_73  & ((~ x_0) & \#app_arg_74 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_162
    if (\$d(%,%) [0:0]) begin
      adr1_3 <= 7'b0000000;
    end else begin
      adr1_3 <= result_117;
    end
  end
  // register end

  assign \#a'_12  = (cnt1_7 == 64'sd8) & (result_105 & (x_1 == adr1_3));

  always @(*) begin
    if(result_120)
      result_119 = 1'b0;
    else
      result_119 = result_100;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_163
    if (\$d(%,%) [0:0]) begin
      \#app_arg_75  <= 1'b1;
    end else begin
      \#app_arg_75  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_164
    if (\$d(%,%) [0:0]) begin
      \#app_arg_76  <= 1'b1;
    end else begin
      \#app_arg_76  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_165
    if (\$d(%,%) [0:0]) begin
      result_120 <= 1'b0;
    end else begin
      result_120 <= (x & (\#app_arg_75  & ((~ x_0) & \#app_arg_76 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_166
    if (\$d(%,%) [0:0]) begin
      wr1_0 <= 1'b0;
    end else begin
      wr1_0 <= result_119;
    end
  end
  // register end

  assign \#a'_13  = result_99 & wr1_0;

  always @(*) begin
    if(\#a'_13 )
      result_121 = x_2;
    else
      result_121 = \tx_data'1 ;
  end

  always @(*) begin
    if(result_123)
      result_122 = 8'b00000000;
    else
      result_122 = result_121;
  end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_167
    if (\$d(%,%) [0:0]) begin
      \#app_arg_77  <= 1'b1;
    end else begin
      \#app_arg_77  <= x;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_168
    if (\$d(%,%) [0:0]) begin
      \#app_arg_78  <= 1'b1;
    end else begin
      \#app_arg_78  <= x_0;
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_169
    if (\$d(%,%) [0:0]) begin
      result_123 <= 1'b0;
    end else begin
      result_123 <= (x & (\#app_arg_77  & ((~ x_0) & \#app_arg_78 )));
    end
  end
  // register end

  // register begin
  always @(posedge \$d(%,%) [1:1] or posedge \$d(%,%) [0:0]) begin : I2CSlave_i2cSlave_register_170
    if (\$d(%,%) [0:0]) begin
      \tx_data'1  <= 8'b00000000;
    end else begin
      \tx_data'1  <= result_122;
    end
  end
  // register end

  assign \#a'_14  = (cnt1_4 == 64'sd12) & \#a'_app_arg_0 ;

  always @(*) begin
    if(\#a'_19 )
      result_124 = 1'b0;
    else
      result_124 = ack;
  end

  always @(*) begin
    if(\#a'_15 )
      result_125 = (\tx_data'1 [(64'sd4)]) == 1'b1;
    else
      result_125 = result_126;
  end

  assign \#a'_15  = (cnt1_4 == 64'sd13) & \#a'_app_arg_0 ;

  assign x_2 = eta2[7:0];

  always @(*) begin
    if(\#a'_16 )
      result_126 = (\tx_data'1 [(64'sd3)]) == 1'b1;
    else
      result_126 = result_127;
  end

  assign \#a'_16  = (cnt1_4 == 64'sd14) & \#a'_app_arg_0 ;

  always @(*) begin
    if(\#a'_17 )
      result_127 = (\tx_data'1 [(64'sd2)]) == 1'b1;
    else
      result_127 = result_128;
  end

  assign \#a'_17  = \#a'_app_arg  & \#a'_app_arg_0 ;

  always @(*) begin
    if(\#a'_18 )
      result_128 = (\tx_data'1 [(64'sd1)]) == 1'b1;
    else
      result_128 = result_129;
  end

  assign \#a'_app_arg  = cnt1_4 == 64'sd15;

  assign \#a'_18  = (cnt1_4 == 64'sd16) & \#a'_app_arg_0 ;

  always @(*) begin
    if(\#a'_19 )
      result_129 = (\tx_data'1 [(64'sd0)]) == 1'b1;
    else
      result_129 = tx_out;
  end

  assign \#a'_19  = (cnt1_4 == 64'sd17) & \#a'_app_arg_0 ;

  assign \#a'_app_arg_0  = result_69 & (x_1 == adr1_1);
endmodule

